<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[dreamxuwj]]></title>
  <subtitle><![CDATA[Everything that you've learnt and all the hardships you've suffered will all come in handy at some point in your life.]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.dreamxuwj.com/"/>
  <updated>2016-04-10T10:50:55.814Z</updated>
  <id>http://www.dreamxuwj.com/</id>
  
  <author>
    <name><![CDATA[dream.xuwj]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Android触摸事件机制]]></title>
    <link href="http://www.dreamxuwj.com/2016/04/09/android%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6/"/>
    <id>http://www.dreamxuwj.com/2016/04/09/android事件机制/</id>
    <published>2016-04-08T17:07:03.000Z</published>
    <updated>2016-04-10T10:50:55.814Z</updated>
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>随着科学技术的发展，智能手机早已成为我们当代人身边必不可少的“伙伴”之一，堪比对象女友。每天我们对着手机重复的做着<code>点击</code>、<code>滑动</code>操作，而手机则随着我们的操作给我们展示她的精彩。<br>…<br>废话到此结束。</p>
<p>看到这里，即使不是作为移动端码农的你也应该知道触摸事件对手机（经典键盘机除外）的重要性了。<br><a id="more"></a></p>
<h1 id="什么是触摸事件">什么是触摸事件</h1><p>顾名思义，就是触摸手机屏幕后产生的事件。这时候请你拿出手机，点击屏幕中的某个按钮（不要松手），移动一段距离，松手。<br>这个过程一般会产生如下几个事件：</p>
<ol>
<li>点击（Down）事件</li>
<li>移动（Move）事件</li>
<li>松手（Up）事件</li>
</ol>
<p>Android为我们封装好了一个触摸事件类<code>MotionEvent</code>,上述的三个过程分别对应着<code>MotionEvent</code>中的<code>MotionEvent.ACTION_DOWN</code>、<code>MotionEvent.ACTION_MOVE</code>、<code>MotionEvent.ACTION_UP</code>事件类型，我们可以以此来实现不同的逻辑，即事件的分发处理。所谓触摸事件的分发，实际上可以理解为<code>MotionEvent</code>事件的分发过程，即当一个<code>MotionEvent</code>产生了之后，系统需要把这个事件传递给一个具体的View，而这个传递的过程就是分发过程。</p>
<h1 id="事件三剑客">事件三剑客</h1><p>一般事件的分发过程是由事件三剑客（方法）来共同完成的。<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> 剑客一：用于事件的分发</span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">public boolean dispathTouchEvent(MotionEvent ev)</span><br><span class="line"></span><br><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> 剑客二：在剑客一种被调用，用于事件的拦截</span><br><span class="line"> <span class="keyword">*</span>/ </span><br><span class="line">public boolean onInterceptTouchEvent(MotionEvent ev)</span><br><span class="line"></span><br><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> 剑客三：在剑客一种被调用，处理点击事件，true：消耗了当前事件  false：当前view无</span><br><span class="line"> <span class="keyword">*</span> 法再次接收事件</span><br><span class="line"> <span class="keyword">*</span>/ </span><br><span class="line">public boolean onTouchEvent()(MotionEvent ev)</span><br></pre></td></tr></table></figure></p>
<p>三剑客的关系如下图所示（以Activity的dispathTouchEvent为例）<br><img src="http://i.imgur.com/Rg3INJ7.png" alt=""><br>分析可知：</p>
<ol>
<li>触摸事件ev类收到点击的ACTION，会回调onUserInteraction方法，一般项目中我们把一些需要用户开始触摸时就需要执行的任务代码放在这里。</li>
<li>接下来触摸事件ev会传递给Activity窗口绑定的根视图<code>rootView</code>（View/ViewGroup），如果根视图也有子视图，事件ev会一级一级的分发下去，如果在这个过程中ev被消耗了，事件就此结束分发，否则进入步奏3。</li>
<li>所有的视图布局都没有消耗掉ev事件，就会调用Activity的onTouchEvent()方法。下面会具体讲诉。</li>
</ol>
<h1 id="Android界面简析">Android界面简析</h1><p>在具体讲诉前，我们先来了解下的android的界面架构。如果说手机是一个学校，那么手机中的每一个APP（应用）都是学校里的一道道独特风景，正是它们，构成了学校的魅力。而每个APP都是由一个个Activity组成的。<br><br>还是在说废话…<br><br>如下图所示，我们清晰的看到每个<code>Activity</code>都会包含一个<code>Window</code>对象。而<code>window</code>对象通常由<code>PhoneWindow</code>来实现。<code>PhoneWindow</code>将一个<code>DecorView</code>设置为整个应用窗口的根View。它将屏幕分成两部分，一个是TitleView，另一个是<code>ContentView</code>（也就是大家熟悉的ContentView布局）。ContentView是一个ID为<code>content</code>的<code>FrameLayout</code>，而我们一直写的activity_xx.xml布局就是设置在这样一个FrameLayout里。<br><img src="http://i.imgur.com/sDIh7us.png" alt="3-1"><br><code>DecorView</code>将要显示的具体内容呈现在了<code>PhoneWindow</code>上，这里面的所有View的监听事件（点击、滑动等操作）都通过一个名为<code>WindowManagerService</code>来进行接收（具体可看深入理解android卷三），并通过Activity来回调相应的监听。<br>为了让大家更好的理解，我们来写一个小demo如下<br><img src="http://i.imgur.com/Nq5Njwg.png" alt=""></p>
<p>运行结果如图<br><img src="http://i.imgur.com/adFg1sB.png" alt=""></p>
<h1 id="小场景，见真理">小场景，见真理</h1><h2 id="场景一">场景一</h2><p>我们写一个最简单的demo如下<br><img src="http://i.imgur.com/mXY1aPP.png" alt=""><br>运行程序，点击button，看到log输出如下：<br><img src="http://i.imgur.com/c4PTZqd.png" alt=""><br>修改dispathTouchEvent，直接<code>return false</code>；<br>运行程序，点击button，是不是看到控制台什么都没有输出。可见事件传递到activity的根视图就被结束分发了。下面已场景二来具体探究下这个过程。</p>
<h2 id="场景二">场景二</h2><p>假如在大学中，学校交给了数学老师一个任务，老师讲这项任务布置给了女班长，而女班长又将这个任务交给了帅气的我，我千辛万苦的将这个任务完成了，然后交给了女班长，女班长觉得完成的不错，夸了帅气的我几句（暗恋上了），然后将任务提交给了老师，老师看了下也觉得完成的不错，就把任务提交给学校了。<br>依据上面的场景，我们设计一个场景实例如下</p>
<ol>
<li>老师——TeacherViewGroup</li>
<li>女班长——MonitressViewGroup</li>
<li>帅气的我——HandsomeMyView</li>
</ol>
<p>布局层次如下图所示<br><img src="http://i.imgur.com/dwuwmp6.png" alt=""><br><img src="http://i.imgur.com/r87ZPpd.png" alt=""></p>
<p>TeacherViewGroup和MonitressViewGroup代码如下，重写了三剑客方法<br><img src="http://i.imgur.com/a8LsHcP.png" alt=""></p>
<p>HandsomeMyView代码如下，view是没有剑客2（方法）<code>onInterceptTouchEvent()</code>的<br><img src="http://i.imgur.com/bMgQyq7.png" alt=""></p>
<p>点击<code>帅气的我</code>可以看见log打印如下<br><img src="http://i.imgur.com/p41FZgb.png" alt=""></p>
<p>可以看见一般事件都有两个过程</p>
<ul>
<li>传递过程 ： 老师（TeacherViewGroup）——&gt;女班长（MonitressViewGroup）——&gt;帅气的我（HandsomeMyView）</li>
<li>处理过程 ： 帅气的我（HandsomeMyView）——&gt;女班长（MonitressViewGroup）——&gt;老师（TeacherViewGroup）</li>
</ul>
<p>传递的过程方法：剑客1（dispatchTouchEvent）、剑客2（onInterceptTouchEvent）<br>处理的过程方法：剑客3（onTouchEvent）</p>
<p>为了让大家更好的理解，整理视图如下：</p>
<p><img src="http://i.imgur.com/r5v0xFe.png" alt=""></p>
<p>从中我们看出触摸事件ev会按照子View加入ViewGroup先后顺序<code>相反</code>的顺序，依次有机会去消费此触摸事件ev，即最后加入的最先有机会消费此触摸事件（消费的前提是，触摸点在这个子View的视图范围之内）。简而言之，传递由外向内，消费（处理）由内向外。</p>
<p>在前面的事件三剑客中细心的同学会发现，他们的返回值都是<code>boolean</code>类型，那么true和false分别代表什么意义呢？<br>在这里我先告诉大家结论，然后在验证这个结论：</p>
<p><code>dispatchTouchEvent()</code>和<code>onInterceptTouchEvent()</code></p>
<ul>
<li>返回true表示事件被拦截，不继续；</li>
<li>返回false表示事件不被拦截，继续下一步流程；</li>
</ul>
<p><code>onTouchEvent()</code></p>
<ul>
<li>返回true表示事件被处理了，不用传递给上一级视图；</li>
<li>返回false表示事件交给上一级视图处理；</li>
</ul>
<p>初始情况下他们的默认返回值都为<code>false</code>。</p>
<h3 id="拦截onInterceptTouchEvent()">拦截onInterceptTouchEvent()</h3><p>假设女班长暗恋帅气的我，自己偷偷帮我完成了任务，这时候事件就被女班长（MonitressViewGroup）的<code>onInterceptTouchEvent()</code>方法拦截了，即<code>MonitressViewGroup</code>的<code>onInterceptTouchEvent()</code>返回ture，此时Log输出如下<br><img src="http://i.imgur.com/M3VpiHa.png" alt=""></p>
<p>整理视图如下：<br><img src="http://i.imgur.com/HcRhyg6.png" alt=""></p>
<p>同样的，也可以假设老师人比较好，不忍心麻烦学生，自己处理了，这个过程类似女班长处理过程。</p>
<p>到这里，我想大家对事件的分发、拦截已经有一个比较清楚的认识了。接下来我们来看下事件的处理。</p>
<h3 id="处理onTouchEvent()">处理onTouchEvent()</h3><p>我们处理完任务后是需要将完成结果汇报给上级的，也就是帅气的我需要向我亲爱的女班长汇报结果，班长向老师汇报结果。假设我不能按时完成任务，没将任务结果汇报给女班长，也就是HandsomeMyView的<code>onTouchEvent()</code>方法返回true（事件被处理了，不用返回给上级），此时Log输出如下，女班长和老师不用继续处理事件了<br><img src="http://i.imgur.com/keessyF.png" alt=""></p>
<p>整理视图如下：<br><img src="http://i.imgur.com/eTr8Mzx.png" alt=""></p>
<p>同样的，女班长和老师也可以不像他们各自的上级汇报，过程类似<code>帅气的我</code>（HandsomeMyView）。</p>
<h1 id="Ref">Ref</h1><ol>
<li><a href="http://trinea.github.io/download/pdf/android/PRE_andevcon_mastering-the-android-touch-system.pdf" target="_blank" rel="external">Mastering the Android Touch System</a></li>
<li>Android群英传<br>…</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="前言">前言</h1><p>随着科学技术的发展，智能手机早已成为我们当代人身边必不可少的“伙伴”之一，堪比对象女友。每天我们对着手机重复的做着<code>点击</code>、<code>滑动</code>操作，而手机则随着我们的操作给我们展示她的精彩。<br>…<br>废话到此结束。</p>
<p>看到这里，即使不是作为移动端码农的你也应该知道触摸事件对手机（经典键盘机除外）的重要性了。<br>]]>
    
    </summary>
    
      <category term="事件分发、事件拦截" scheme="http://www.dreamxuwj.com/tags/%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E3%80%81%E4%BA%8B%E4%BB%B6%E6%8B%A6%E6%88%AA/"/>
    
      <category term="移动开发" scheme="http://www.dreamxuwj.com/categories/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[开源项目mobile_technology开篇]]></title>
    <link href="http://www.dreamxuwj.com/2016/01/19/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AEmobile_technology%E5%BC%80%E7%AF%87/"/>
    <id>http://www.dreamxuwj.com/2016/01/19/开源项目mobile_technology开篇/</id>
    <published>2016-01-19T12:07:28.000Z</published>
    <updated>2016-01-19T13:08:06.060Z</updated>
    <content type="html"><![CDATA[<p>个人技术的成长道路上一直伴随着各位前辈的开源项目，因为他们的开源精神，造福了一代又一代的后辈，使我们少走了很多弯路，这大概就是所谓的前人栽树，后人乘凉。 在此，特地向各位前辈道声谢。<br><a id="more"></a></p>
<h1 id="背景">背景</h1><p><code>2016-1-16</code>，在和技术群里的几个伙伴交流讨论中，萌生了搞个开源项目的想法。于是和伙伴们讨论了下，大家都挺赞同的，于是，开源项目<a href="https://github.com/fanatic-mobile-developer-for-android/mobile_technology" target="_blank" rel="external">mobile_technology</a>诞生了。也许我们不是纯粹的创造者，但在这里，起码我们是一个传播者，传播着开源精神。期待，能为后来者做自己的一份贡献，同时梳理总结下我们的知识。</p>
<h1 id="目的">目的</h1><ol>
<li>为开源做一份小的贡献</li>
<li>构造一个完整的技术学习体系</li>
<li>打造一个良好的技术交流区</li>
</ol>
<h2 id="开发工具">开发工具</h2><ul>
<li>android studio</li>
<li>xcode、appcode</li>
</ul>
<h2 id="要求">要求</h2><ul>
<li>遵循开源规范、代码规范</li>
<li>拥有github账号并熟练使用git</li>
<li>需提出完善的解决方案并提供封装良好的库和demo</li>
</ul>
<h2 id="期待拥抱共同梦想的你">期待拥抱共同梦想的你</h2><h3 id="加入方式">加入方式</h3><blockquote>
<p>在<a href="https://github.com/fanatic-mobile-developer-for-android/mobile_technology/issues/2" target="_blank" rel="external">issues #2</a>填写你的Github账号和QQ号</p>
</blockquote>
<h3 id="交流群">交流群</h3><p>群号：</p>
<blockquote>
<p>299402133 </p>
</blockquote>
<p>入群验证问题：</p>
<blockquote>
<p>Fragment 创建完成后和 Activity 间通信方式？</p>
</blockquote>
<h2 id="在这里，你将得到的收获">在这里，你将得到的收获</h2><ol>
<li>扩大交际圈，得到一群基友</li>
<li>技术水平、学习能力的提升</li>
</ol>
<h2 id="开源目录">开源目录</h2><h3 id="common技术区"><a href="https://github.com/fanatic-mobile-developer-for-android/mobile_technology/tree/master/common" target="_blank" rel="external">common技术区</a></h3><h3 id="android技术区"><a href="https://github.com/fanatic-mobile-developer-for-android/mobile_technology/tree/master/android" target="_blank" rel="external">android技术区</a></h3><h3 id="iOS技术区"><a href="https://github.com/fanatic-mobile-developer-for-android/mobile_technology/tree/master/iOS" target="_blank" rel="external">iOS技术区</a></h3><h1 id="About_me">About me</h1><p>student of FJNU ,Focus on mobile develop and product design</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>个人技术的成长道路上一直伴随着各位前辈的开源项目，因为他们的开源精神，造福了一代又一代的后辈，使我们少走了很多弯路，这大概就是所谓的前人栽树，后人乘凉。 在此，特地向各位前辈道声谢。<br>]]>
    
    </summary>
    
      <category term="mobile_technology" scheme="http://www.dreamxuwj.com/tags/mobile-technology/"/>
    
      <category term="开源" scheme="http://www.dreamxuwj.com/tags/%E5%BC%80%E6%BA%90/"/>
    
      <category term="移动开发" scheme="http://www.dreamxuwj.com/categories/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何用好Google、百度等搜索引擎]]></title>
    <link href="http://www.dreamxuwj.com/2015/11/28/%E5%A6%82%E4%BD%95%E7%94%A8%E5%A5%BDGoogle%E3%80%81%E7%99%BE%E5%BA%A6%E7%AD%89%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    <id>http://www.dreamxuwj.com/2015/11/28/如何用好Google、百度等搜索引擎/</id>
    <published>2015-11-28T02:59:46.000Z</published>
    <updated>2016-01-18T06:03:28.866Z</updated>
    <content type="html"><![CDATA[<h1 id="背景">背景</h1><ol>
<li>互联网工作者，每天的查阅资料是必不可少的，有人Google（天朝原因,需翻墙）、有人百度、有人好搜etc. 每个人都有自己喜欢用的搜索引擎，然而很多人确只会简单的小白式搜索，白白浪费很多时间。<a id="more"></a></li>
<li>一段时间在技术社区吹水，却被很多人误以为大神（实际我也是刚毕业的小菜鸟，只不过走的路多了几步、喜欢吹点水而已），导致很多人私聊问问题，虽然自己也经常耐心帮忙，但实在对他们的问题无语，很多一百度第一条就是答案的问题他们也问，叫他们自己百度，他们说查不到。。瞬间我就无语了<br><img src="http://7xj4l6.com1.z0.glb.clouddn.com/mood.jpg" alt=""></li>
<li>一直牢记<code>授人以鱼，不如授之以渔</code>,所以最常说的一句话就是自己Google，或者把想好的关键字给他们，让他们自己Google，个人比较反感直接给答案链接的</li>
<li>最好用Google，developer用百度简直就是在浪费生命<br>废话好像说的有点多，下面直接进入正题，做为一个互联网工作者，如何用好Google</li>
</ol>
<h1 id="关键字">关键字</h1><p>也许会有人奇怪为什么我把关键字排在了这么前面。懂搜索的人都知道，会提取关键字和不会提取关键字简直不在同一水平。要想查到高质量的结果，就要有把术语和俗称进行转换的能力，也就是关键字提取能力。另外，经过自己一段时间的检验，在搜索中加入一些比较靠谱的相关领域的大牛或者专家名字，得到的结果质量会高很多。</p>
<h1 id="基本搜索+_-_OR等">基本搜索+ - OR等</h1><ul>
<li><p><code>+（空格）作用：关键字的与操作</code><br>例、要下载window8系统，如何搜索会更好？</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>+<span class="number">8</span>+下载（<span class="built_in">window</span> <span class="number">8</span> 下载）</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>-</code><br>减号代表搜索不包含减号后面的词的页面。使用这个指令时减号前面必须是空格，减号后面没有空格，紧跟着需要排除的词。Google 和bd都支持这个指令。<br>例：搜索 -引擎<br>返回的则是包含“搜索”这个词，却不包含“引擎”这个词的结果</p>
</li>
<li><p><code>OR（不能用小写）</code> 表示或的意思</p>
</li>
<li><p><code>关键字</code><br>GOOGLE的关键字可以是词组（中间没有空格），也可以是句子（中间有空格），但是，用句子做关键字，必须加<code>英文引号</code>。</p>
</li>
<li><p><code>星号</code><br>星号<em>是常用的通配符，也可以用在搜索中。百度不支持</em>号搜索指令。<br>比如在Google 中搜索：搜索<em>擎其中的</em>号代表任何文字。<br>返回的结果就不仅包含“搜索引擎”，还包含了“搜索收擎”，“搜索巨擎”等内容。</p>
</li>
</ul>
<h1 id="高级搜索">高级搜索</h1><ul>
<li><p><code>site</code><br>site:是SEO 最熟悉的高级搜索指令，用来搜索某个域名下的所有文件。</p>
</li>
<li><p><code>intitle</code><br>intitle: 指令返回的是页面title 中包含关键词的页面。Google 和bd都支持intitle 指令。使用intitle 指令找到的文件是更准确的竞争页面。如果关键词只出现在页面可见文字中，而没有出现在title 中，大部分情况是并没有针对关键词进行优化，所以也不是有力的竞争对手。</p>
</li>
<li><p><code>allintitle</code><br>allintitle:搜索返回的是页面标题中包含多组关键词的文件。<br>例：allintitle:SEO 搜索引擎优化<br>相当于：intitle:SEO intitle:搜索引擎优化返回的是标题中中既包含“SEO”，也包含“搜索引擎优化”的页面</p>
</li>
<li><p><code>inurl</code><br>inurl: 指令用于搜索查询词出现在url 中的页面。bd和Google 都支持inurl 指令。inurl 指令支持中文和英文。比如搜索：inurl:搜索引擎优化</p>
</li>
<li><p><code>allinurl</code><br>与allintitle: 类似。<br>例：allinurl:SEO 搜索引擎优化<br>相当于 ：inurl:SEO inurl:搜索引擎优化</p>
</li>
<li><p><code>filetype</code><br>用于搜索特定文件格式。Google 和bd都支持filetype 指令。<br>例：filetype:pdf SEO<br>返回的就是包含SEO 这个关键词的所有pdf 文件。</p>
</li>
<li><p><code>link:URL</code><br>列出链接到目标URL的网页清单.<br><code>注：“link”不能与其他语法相混合操作，所以“link:”后面即使有空格，也将被GOOGLE忽略。</code></p>
</li>
<li><p><code>related:URL</code><br>列出与目标URL地址有关的网页</p>
</li>
<li><p><code>cache:网站名</code><br>cache用来搜索GOOGLE服务器上某页面的缓存，这个功能同“网页快照”，通常用于查找某些已经被删除的死链接网页，相当于使用普通搜索结果页面中的“网页快照”功能。</p>
</li>
<li><p><code>allintext:</code><br>搜索文本,但不包括网页标题和链接</p>
</li>
<li><p><code>allinlinks</code><br>搜索链接, 不包括文本和标题</p>
</li>
<li><p><code>info:URL</code><br>info用来显示与某链接相关的一系列搜索，提供cache、link、related和完全包含该链接的网页的功能。</p>
</li>
<li><p><code>time1..time2</code><br>只显示从time1到time2时间段内的内容</p>
</li>
</ul>
<h1 id="一图知搜索">一图知搜索</h1><p><img src="http://7xj4l6.com1.z0.glb.clouddn.com/search.jpg" alt=""></p>
<p><code>以前用的最多的就是site:pan.baidu.com 当年为舍友贡献了无数资源。。</code><br><code>本地搜索最喜欢的还是Everything，几秒就能查询整个机子。</code></p>
<h1 id="组合案例">组合案例</h1><h2 id="1、查找微软网站上关于windows2000的安全课题资料">1、查找微软网站上关于windows2000的安全课题资料</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">inurl:</span>security windows2000 <span class="string">site:</span>microsoft.com</span><br></pre></td></tr></table></figure>
<p><img src="http://7xj4l6.com1.z0.glb.clouddn.com/案例1.png" alt=""></p>
<h2 id="2、查找Github上关于android标签的例子">2、查找Github上关于android标签的例子</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">inurl:</span>tag android <span class="string">site:</span>github.com</span><br></pre></td></tr></table></figure>
<p><img src="http://7xj4l6.com1.z0.glb.clouddn.com/android%20demo2.png" alt=""></p>
<h2 id="3、app-debug_app-debug-unaligned的区别">3、app-debug app-debug-unaligned的区别</h2><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app-<span class="keyword">debug</span> app-<span class="keyword">debug</span>-unaligned intitle:区别</span><br></pre></td></tr></table></figure>
<p><img src="http://7xj4l6.com1.z0.glb.clouddn.com/demo%203.png" alt=""></p>
<h2 id="4、组合技巧">4、组合技巧</h2><p><code>site:.com inurl:blog “post a comment” -”comments closed” -”you must be logged in” “输入你的关键词”</code><br>site:.com 是 指， 只显示.com的网站。<br>如果你想要org的链接，就换成 site:.org<br>inurl:blog 是指博客。<br>“post a comment” -”comments closed” -”you must be logged in”<br>是指， “能够写评论的” 减去“ 关闭评论的” 再减去“ 必须要登录才能写评论的”。</p>
<h1 id="无翻墙能力者">无翻墙能力者</h1><ol>
<li><a href="http://www.gycc.com/" title="一定程度上搜索内容和Google一样" target="_blank" rel="external">http://www.gycc.com/</a></li>
<li><a href="http://www.aol.com/" title="相当于Google的英文搜索" target="_blank" rel="external">http://www.aol.com/</a></li>
<li>绑定<a href="https://github.com/racaljk/hosts" target="_blank" rel="external">hosts</a></li>
<li><a href="https://github.com/getlantern/lantern" target="_blank" rel="external">lantern</a></li>
<li><a href="http://shadowsocks.blogspot.jp/2015/01/shadowsocks.html#gpluscomments" target="_blank" rel="external">自己搭建vps（推荐）</a></li>
</ol>
<h1 id="Ref">Ref</h1><p><a href="http://lifehacker.com/google-tips-and-tricks-every-student-should-know-1508121671" target="_blank" rel="external">http://lifehacker.com/google-tips-and-tricks-every-student-should-know-1508121671</a><br><a href="http://www.zhihu.com/question/20161362" target="_blank" rel="external">http://www.zhihu.com/question/20161362</a><br><a href="http://searchengineland.com/guide/how-to-use-google-to-search" target="_blank" rel="external">http://searchengineland.com/guide/how-to-use-google-to-search</a><br><a href="http://blog.sciencenet.cn/blog-734884-667157.html" target="_blank" rel="external">http://blog.sciencenet.cn/blog-734884-667157.html</a><br><a href="http://mashable.com/2011/11/24/google-search-infographic/#MvOOF1h9vsqW" target="_blank" rel="external">http://mashable.com/2011/11/24/google-search-infographic/#MvOOF1h9vsqW</a><br><a href="http://article.yeeyan.org/view/6774/2620" target="_blank" rel="external">http://article.yeeyan.org/view/6774/2620</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="背景">背景</h1><ol>
<li>互联网工作者，每天的查阅资料是必不可少的，有人Google（天朝原因,需翻墙）、有人百度、有人好搜etc. 每个人都有自己喜欢用的搜索引擎，然而很多人确只会简单的小白式搜索，白白浪费很多时间。]]>
    
    </summary>
    
      <category term="Google" scheme="http://www.dreamxuwj.com/tags/Google/"/>
    
      <category term="搜索引擎" scheme="http://www.dreamxuwj.com/tags/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
      <category term="百度" scheme="http://www.dreamxuwj.com/tags/%E7%99%BE%E5%BA%A6/"/>
    
      <category term="tools" scheme="http://www.dreamxuwj.com/categories/tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[unable to load VirtualBox engine错误（系统为window 7）]]></title>
    <link href="http://www.dreamxuwj.com/2015/07/16/unable%20to%20load%20VirtualBox%20engine%E9%94%99%E8%AF%AF%EF%BC%88%E7%B3%BB%E7%BB%9F%E4%B8%BAwindow%207%EF%BC%89/"/>
    <id>http://www.dreamxuwj.com/2015/07/16/unable to load VirtualBox engine错误（系统为window 7）/</id>
    <published>2015-07-15T17:13:08.000Z</published>
    <updated>2015-08-01T08:51:55.725Z</updated>
    <content type="html"><![CDATA[<p>在使用Genymotion的过程中，碰到了unable to load VirtualBox engine错误，google了好久，最后才解决，特别坑，在此做个小记录。<br><a id="more"></a></p>
<ol>
<li>错误如下图所示：<br><img src="http://7xj4l6.com1.z0.glb.clouddn.com/error.png" alt=""><br><br></li>
<li>解决方法很简单，只要改下软件的兼容性就好了(右键-&gt;属性-&gt;兼容性-&gt;选windows vista)<br><img src="http://7xj4l6.com1.z0.glb.clouddn.com/QQ图片20150729172338.png" alt=""></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>在使用Genymotion的过程中，碰到了unable to load VirtualBox engine错误，google了好久，最后才解决，特别坑，在此做个小记录。<br>]]>
    
    </summary>
    
      <category term="Genymotion" scheme="http://www.dreamxuwj.com/tags/Genymotion/"/>
    
      <category term="错误集" scheme="http://www.dreamxuwj.com/categories/%E9%94%99%E8%AF%AF%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Studio中获取SHA1和MD5]]></title>
    <link href="http://www.dreamxuwj.com/2015/07/13/Android%20Studio%E4%B8%AD%E8%8E%B7%E5%8F%96SHA1%E5%92%8CMD5/"/>
    <id>http://www.dreamxuwj.com/2015/07/13/Android Studio中获取SHA1和MD5/</id>
    <published>2015-07-12T17:13:08.000Z</published>
    <updated>2015-09-01T06:28:07.755Z</updated>
    <content type="html"><![CDATA[<p>许多Eclipse的朋友刚转android studio，原来在eclipse中很容易就能获取SHA1和MD5，但是转到android studio后，却不懂得如何查看了，以下是本人的一点记录，希望对朋友有帮助。<br><a id="more"></a></p>
<ol>
<li>打开android studio自带的命令行，如下图：<br><img src="http://7xj4l6.com1.z0.glb.clouddn.com/android_termanil.png" alt=""><br><br></li>
<li>输入命令<code>keytool -v -list -keystore path</code>（path为你的keystore的路径）<br><img src="http://7xj4l6.com1.z0.glb.clouddn.com/sha1_md5.png" alt=""></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>许多Eclipse的朋友刚转android studio，原来在eclipse中很容易就能获取SHA1和MD5，但是转到android studio后，却不懂得如何查看了，以下是本人的一点记录，希望对朋友有帮助。<br>]]>
    
    </summary>
    
      <category term="Android Studio" scheme="http://www.dreamxuwj.com/tags/Android-Studio/"/>
    
      <category term="MD5" scheme="http://www.dreamxuwj.com/tags/MD5/"/>
    
      <category term="SHA1" scheme="http://www.dreamxuwj.com/tags/SHA1/"/>
    
      <category term="移动开发" scheme="http://www.dreamxuwj.com/categories/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android自定义View总结]]></title>
    <link href="http://www.dreamxuwj.com/2015/06/20/Android%E8%87%AA%E5%AE%9A%E4%B9%89View%E6%80%BB%E7%BB%93/"/>
    <id>http://www.dreamxuwj.com/2015/06/20/Android自定义View总结/</id>
    <published>2015-06-19T17:07:03.000Z</published>
    <updated>2016-04-09T09:11:12.935Z</updated>
    <content type="html"><![CDATA[<p>在android开发中，官方给我们的原生控件往往无法满足我们的需求，这时候我们经常要自定义控件，除了实现功能的需求外，当然也存在着点装逼成分，哈，下面是我关于自定义控件的一些总结。<br><a id="more"></a><br>推荐爱哥关于自定义控件的blog：<a href="http://blog.csdn.net/aigestudio/article/details/41212583" target="_blank" rel="external">自定义控件其实很简单</a></p>
<h1 id="步骤">步骤</h1><ul>
<li><strong>自定义<code>View</code>的属性</strong></li>
<li><strong>在<code>View</code>的构造方法获取我们自定义的属性值</strong></li>
<li><strong>重写<code>onMesure()</code>方法</strong></li>
<li><strong>重写<code>onDraw()</code>方法</strong></li>
</ul>
<h1 id="自定义View的属性">自定义View的属性</h1><p>在<code>res/values/</code>下建立<code>attrs.xml</code>，定义控件的属性和样式，如下所示：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;declare-styleable <span class="variable">name=</span><span class="string">"CircleImageView"</span>&gt;</span><br><span class="line">    &lt;attr <span class="variable">name=</span><span class="string">"border_width"</span> <span class="variable">format=</span><span class="string">"dimension"</span> /&gt;</span><br><span class="line">    &lt;attr <span class="variable">name=</span><span class="string">"border_color"</span> <span class="variable">format=</span><span class="string">"color"</span> /&gt;</span><br><span class="line">&lt;/declare-styleable&gt;</span><br></pre></td></tr></table></figure></p>
<p><code>format</code>为取值类型，有以下类型：</p>
<ul>
<li><strong>string 字符串</strong></li>
<li><strong>color 颜色值，如#ffffff</strong></li>
<li><strong>dimension 尺寸，xml中设置为dp/dip, 字体为sp</strong></li>
<li><strong>integer 数值 1</strong></li>
<li><strong>enum 枚举类型</strong></li>
<li><strong>reference 引用，如@drawable/ic_launcher</strong></li>
<li><strong>float 浮点类型 如1.0</strong></li>
<li><strong>boolean 布尔类型 true或false</strong></li>
<li><strong>fraction 百分数 如100%</strong></li>
<li><strong>flag 位或运算</strong></li>
</ul>
<p>在xml布局文件中，声明我们的自定义View，示例代码：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;com.infzm.o2o.view.CircleImageView</span><br><span class="line">       xmlns:<span class="variable">app=</span><span class="string">"http://schemas.android.com/apk/res-auto"</span></span><br><span class="line">       android:<span class="variable">id=</span><span class="string">"@+id/iv_head_icon"</span></span><br><span class="line">       android:<span class="variable">layout_width=</span><span class="string">"wrap_content"</span></span><br><span class="line">       android:<span class="variable">layout_height=</span><span class="string">"59dp"</span></span><br><span class="line">       android:<span class="variable">layout_marginBottom=</span><span class="string">"15dp"</span></span><br><span class="line">       android:<span class="variable">layout_marginLeft=</span><span class="string">"15dp"</span></span><br><span class="line">       android:<span class="variable">src=</span><span class="string">"@drawable/ic_profile_user_default"</span></span><br><span class="line">       app:<span class="variable">border_color=</span><span class="string">"@color/white"</span></span><br><span class="line">       app:<span class="variable">border_width=</span><span class="string">"2dp"</span> &gt;</span><br></pre></td></tr></table></figure></p>
<h1 id="在View的构造方法获取我们自定义的属性值">在View的构造方法获取我们自定义的属性值</h1><p>重写3个构造方法，示例代码如下：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CircleImageView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>(context);</span><br><span class="line"></span><br><span class="line">       init();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">CircleImageView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>(context, attrs, <span class="number">0</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">CircleImageView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyle)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>(context, attrs, defStyle);</span><br><span class="line"></span><br><span class="line">       TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.CircleImageView, defStyle, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 获取边界的宽度</span></span><br><span class="line">       mBorderWidth = a.getDimensionPixelSize(R.styleable.CircleImageView_border_width, DEFAULT_BORDER_WIDTH);</span><br><span class="line">       <span class="comment">// 获取边界的颜色</span></span><br><span class="line">       mBorderColor = a.getColor(R.styleable.CircleImageView_border_color, DEFAULT_BORDER_COLOR);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 回收TypedArray,以便后面重用</span></span><br><span class="line">       a.recycle();</span><br><span class="line"></span><br><span class="line">       init();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="重写onMesure()方法">重写onMesure()方法</h1><p>这个方法用来计算View的大小，如果需要计算View的大小，则需要重写此方法。<br>示例代码：<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@Override  </span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> onMeasure(<span class="built_in">int</span> widthMeasureSpec, <span class="built_in">int</span> heightMeasureSpec) &#123;  </span><br><span class="line">    <span class="built_in">int</span> widthMode = MeasureSpec.getMode(widthMeasureSpec);  </span><br><span class="line">    <span class="built_in">int</span> heightMode = MeasureSpec.getMode(heightMeasureSpec);  </span><br><span class="line">    <span class="built_in">int</span> widthSize = MeasureSpec.getSize(widthMeasureSpec);  </span><br><span class="line">    <span class="built_in">int</span> heightSize = MeasureSpec.getSize(heightMeasureSpec);  </span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> <span class="variable">width</span>;  </span><br><span class="line">    <span class="built_in">int</span> <span class="variable">height</span>;  </span><br><span class="line"></span><br><span class="line">    ...   </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (widthMode == MeasureSpec.EXACTLY) &#123;  </span><br><span class="line">        <span class="comment">// Parent has told us how big to be. So be it.  </span></span><br><span class="line">        <span class="variable">width</span> = widthSize;  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        <span class="keyword">if</span> (mLayout != <span class="keyword">null</span> &amp;&amp; mEllipsize == <span class="keyword">null</span>) &#123;  </span><br><span class="line">            des = desired(mLayout);  </span><br><span class="line">        &#125;  </span><br><span class="line"></span><br><span class="line">    ...  </span><br><span class="line"></span><br><span class="line">    setMeasuredDimension(<span class="variable">width</span>, <span class="variable">height</span>);   </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="重写onDraw()方法">重写onDraw()方法</h1><p>我们通过这个方法来绘制我们的视图，示例代码：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="typename">void</span> onDraw(Canvas canvas) &#123;</span><br><span class="line">    <span class="keyword">if</span> (getDrawable() == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    canvas.drawCircle(getWidth() <span class="regexp">/ 2, getHeight() /</span> <span class="number">2</span>, mDrawableRadius, mBitmapPaint);</span><br><span class="line">    <span class="keyword">if</span> (mBorderWidth != <span class="number">0</span>) &#123;</span><br><span class="line">        canvas.drawCircle(getWidth() <span class="regexp">/ 2, getHeight() /</span> <span class="number">2</span>, mBorderRadius, mBorderPaint);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><br><br>开源控件—&gt;自定义圆形头像的解析：<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.infzm.o2o.view;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.infzm.o2o.R;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.res.TypedArray;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Bitmap;</span><br><span class="line"><span class="keyword">import</span> android.graphics.BitmapShader;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Canvas;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Color;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Matrix;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Paint;</span><br><span class="line"><span class="keyword">import</span> android.graphics.RectF;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Shader;</span><br><span class="line"><span class="keyword">import</span> android.graphics.drawable.BitmapDrawable;</span><br><span class="line"><span class="keyword">import</span> android.graphics.drawable.ColorDrawable;</span><br><span class="line"><span class="keyword">import</span> android.graphics.drawable.Drawable;</span><br><span class="line"><span class="keyword">import</span> android.net.Uri;</span><br><span class="line"><span class="keyword">import</span> android.util.AttributeSet;</span><br><span class="line"><span class="keyword">import</span> android.widget.ImageView;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 自定义圆形头像</span><br><span class="line"> *</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> class CircleImageView extends ImageView &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * 缩放类型</span><br><span class="line">	 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ScaleType SCALE_TYPE = ScaleType.CENTER_CROP;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 位图配置</span><br><span class="line">     * ARGB_8888代表</span><br><span class="line">     * A:透明度:8</span><br><span class="line">     * R:红色:8</span><br><span class="line">     * G:绿:8</span><br><span class="line">     * B:蓝:8</span><br><span class="line">     * 表示图片每个像素点占8+8+8+8 = 32位</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Bitmap.Config BITMAP_CONFIG = Bitmap.Config.ARGB_8888;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> COLORDRAWABLE_DIMENSION = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> DEFAULT_BORDER_WIDTH = <span class="number">0</span>; <span class="comment">// 默认边界宽度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> DEFAULT_BORDER_COLOR = Color.BLACK; <span class="comment">// 默认边界颜色</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RectF mDrawableRect = <span class="keyword">new</span> RectF();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RectF mBorderRect = <span class="keyword">new</span> RectF();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Matrix mShaderMatrix = <span class="keyword">new</span> Matrix();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Paint mBitmapPaint = <span class="keyword">new</span> Paint();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Paint mBorderPaint = <span class="keyword">new</span> Paint();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> mBorderColor = DEFAULT_BORDER_COLOR;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> mBorderWidth = DEFAULT_BORDER_WIDTH;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Bitmap mBitmap;</span><br><span class="line">    <span class="keyword">private</span> BitmapShader mBitmapShader; <span class="comment">// 位图渲染</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> mBitmapWidth; <span class="comment">// 位图宽度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> mBitmapHeight; <span class="comment">// 位图高度</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> mDrawableRadius; <span class="comment">// 图片半径</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> mBorderRadius;  <span class="comment">// 带边框的的图片半径</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">boolean</span> mReady;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">boolean</span> mSetupPending;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> CircleImageView(Context context) &#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line"></span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> CircleImageView(Context context, AttributeSet attrs) &#123;</span><br><span class="line">        <span class="keyword">this</span>(context, attrs, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> CircleImageView(Context context, AttributeSet attrs, <span class="built_in">int</span> defStyle) &#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyle);</span><br><span class="line"></span><br><span class="line">        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.CircleImageView, defStyle, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取边界的宽度</span></span><br><span class="line">        mBorderWidth = a.getDimensionPixelSize(R.styleable.CircleImageView_border_width, DEFAULT_BORDER_WIDTH);</span><br><span class="line">        <span class="comment">// 获取边界的颜色</span></span><br><span class="line">        mBorderColor = a.getColor(R.styleable.CircleImageView_border_color, DEFAULT_BORDER_COLOR);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 回收TypedArray,以便后面重用</span></span><br><span class="line">        a.recycle();</span><br><span class="line"></span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> init() &#123;</span><br><span class="line">        <span class="keyword">super</span>.setScaleType(SCALE_TYPE);</span><br><span class="line">        mReady = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mSetupPending) &#123;</span><br><span class="line">            <span class="title">setup</span>();</span><br><span class="line">            mSetupPending = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> ScaleType getScaleType() &#123;</span><br><span class="line">        <span class="keyword">return</span> SCALE_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> setScaleType(ScaleType scaleType) &#123;</span><br><span class="line">        <span class="keyword">if</span> (scaleType != SCALE_TYPE) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="keyword">String</span>.format(<span class="string">"ScaleType %s not supported."</span>, scaleType));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> onDraw(Canvas canvas) &#123;</span><br><span class="line">        <span class="keyword">if</span> (getDrawable() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 绘制圆形图片</span></span><br><span class="line">        canvas.drawCircle(getWidth() / <span class="number">2</span>, getHeight() / <span class="number">2</span>, mDrawableRadius, mBitmapPaint);</span><br><span class="line">        <span class="keyword">if</span> (mBorderWidth != <span class="number">0</span>) &#123; <span class="comment">// 如果边界不为0，怎绘制带边框的圆形图片</span></span><br><span class="line">            canvas.drawCircle(getWidth() / <span class="number">2</span>, getHeight() / <span class="number">2</span>, mBorderRadius, mBorderPaint);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> onSizeChanged(<span class="built_in">int</span> w, <span class="built_in">int</span> h, <span class="built_in">int</span> oldw, <span class="built_in">int</span> oldh) &#123;</span><br><span class="line">        <span class="keyword">super</span>.onSizeChanged(w, h, oldw, oldh);</span><br><span class="line">        <span class="title">setup</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> getBorderColor() &#123;</span><br><span class="line">        <span class="keyword">return</span> mBorderColor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> setBorderColor(<span class="built_in">int</span> borderColor) &#123;</span><br><span class="line">        <span class="keyword">if</span> (borderColor == mBorderColor) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mBorderColor = borderColor;</span><br><span class="line">        mBorderPaint.setColor(mBorderColor);</span><br><span class="line">        invalidate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> getBorderWidth() &#123;</span><br><span class="line">        <span class="keyword">return</span> mBorderWidth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> setBorderWidth(<span class="built_in">int</span> borderWidth) &#123;</span><br><span class="line">        <span class="keyword">if</span> (borderWidth == mBorderWidth) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mBorderWidth = borderWidth;</span><br><span class="line">        <span class="title">setup</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> setImageBitmap(Bitmap bm) &#123;</span><br><span class="line">        <span class="keyword">super</span>.setImageBitmap(bm);</span><br><span class="line">        mBitmap = bm;</span><br><span class="line">        <span class="title">setup</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> setImageDrawable(Drawable drawable) &#123;</span><br><span class="line">        <span class="keyword">super</span>.setImageDrawable(drawable);</span><br><span class="line">        mBitmap = getBitmapFromDrawable(drawable);</span><br><span class="line">        <span class="title">setup</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> setImageResource(<span class="built_in">int</span> resId) &#123;</span><br><span class="line">        <span class="keyword">super</span>.setImageResource(resId);</span><br><span class="line">        mBitmap = getBitmapFromDrawable(getDrawable());</span><br><span class="line">        <span class="title">setup</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> setImageURI(Uri uri) &#123;</span><br><span class="line">        <span class="keyword">super</span>.setImageURI(uri);</span><br><span class="line">        mBitmap = getBitmapFromDrawable(getDrawable());</span><br><span class="line">        <span class="title">setup</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Drawable转Bitmap</span><br><span class="line">     * @param drawable</span><br><span class="line">     * @return</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> Bitmap getBitmapFromDrawable(Drawable drawable) &#123;</span><br><span class="line">        <span class="keyword">if</span> (drawable == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (drawable <span class="keyword">instanceof</span> BitmapDrawable) &#123;</span><br><span class="line">            <span class="keyword">return</span> ((BitmapDrawable) drawable).getBitmap();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Bitmap bitmap;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (drawable <span class="keyword">instanceof</span> ColorDrawable) &#123;</span><br><span class="line">                bitmap = Bitmap.createBitmap(COLORDRAWABLE_DIMENSION, COLORDRAWABLE_DIMENSION, BITMAP_CONFIG);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                bitmap = Bitmap.createBitmap(drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight(), BITMAP_CONFIG);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Canvas canvas = <span class="keyword">new</span> Canvas(bitmap);</span><br><span class="line">            drawable.setBounds(<span class="number">0</span>, <span class="number">0</span>, canvas.getWidth(), canvas.getHeight());</span><br><span class="line">            drawable.<span class="title">draw</span>(canvas);</span><br><span class="line">            <span class="keyword">return</span> bitmap;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (OutOfMemoryError e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setup</span>() &#123;</span><br><span class="line">        <span class="keyword">if</span> (!mReady) &#123;</span><br><span class="line">            mSetupPending = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mBitmap == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 构建渲染器</span></span><br><span class="line">        mBitmapShader = <span class="keyword">new</span> BitmapShader(mBitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置反锯齿</span></span><br><span class="line">        mBitmapPaint.setAntiAlias(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 设置画笔渲染器</span></span><br><span class="line">        mBitmapPaint.setShader(mBitmapShader);</span><br><span class="line">        <span class="comment">// 设置画笔样式</span></span><br><span class="line">        mBorderPaint.setStyle(Paint.Style.STROKE);</span><br><span class="line">        mBorderPaint.setAntiAlias(<span class="keyword">true</span>);</span><br><span class="line">        mBorderPaint.setColor(mBorderColor);</span><br><span class="line">        mBorderPaint.setStrokeWidth(mBorderWidth);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 得到位图宽高</span></span><br><span class="line">        mBitmapHeight = mBitmap.getHeight();</span><br><span class="line">        mBitmapWidth = mBitmap.getWidth();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置含边框显示区域</span></span><br><span class="line">        mBorderRect.<span class="built_in">set</span>(<span class="number">0</span>, <span class="number">0</span>, getWidth(), getHeight());</span><br><span class="line">        <span class="comment">// 计算半径</span></span><br><span class="line">        mBorderRadius = Math.<span class="built_in">min</span>((mBorderRect.<span class="variable">height</span>() - mBorderWidth) / <span class="number">2</span>, (mBorderRect.<span class="variable">width</span>() - mBorderWidth) / <span class="number">2</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置图片显示区域：即View的大小区域减去边界的大小</span></span><br><span class="line">        mDrawableRect.<span class="built_in">set</span>(mBorderWidth, mBorderWidth, mBorderRect.<span class="variable">width</span>() - mBorderWidth, mBorderRect.<span class="variable">height</span>() - mBorderWidth);</span><br><span class="line">        <span class="comment">// 计算图片区域的半径</span></span><br><span class="line">        mDrawableRadius = Math.<span class="built_in">min</span>(mDrawableRect.<span class="variable">height</span>() / <span class="number">2</span>, mDrawableRect.<span class="variable">width</span>() / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        updateShaderMatrix();</span><br><span class="line">        invalidate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> updateShaderMatrix() &#123;</span><br><span class="line">        <span class="built_in">float</span> <span class="built_in">scale</span>;</span><br><span class="line">        <span class="built_in">float</span> dx = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">float</span> dy = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        mShaderMatrix.<span class="built_in">set</span>(<span class="keyword">null</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果位图的高度*显示图片区域的高度 大于 位图高度 * 图片区域宽度</span></span><br><span class="line">        <span class="keyword">if</span> (mBitmapWidth * mDrawableRect.<span class="variable">height</span>() &gt; mDrawableRect.<span class="variable">width</span>() * mBitmapHeight) &#123;</span><br><span class="line">        	<span class="comment">// 按高计算缩放比例</span></span><br><span class="line">            <span class="built_in">scale</span> = mDrawableRect.<span class="variable">height</span>() / (<span class="built_in">float</span>) mBitmapHeight;</span><br><span class="line">            dx = (mDrawableRect.<span class="variable">width</span>() - mBitmapWidth * <span class="built_in">scale</span>) * <span class="number">0.5</span>f;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        	<span class="comment">// 按宽计算缩放比例</span></span><br><span class="line">            <span class="built_in">scale</span> = mDrawableRect.<span class="variable">width</span>() / (<span class="built_in">float</span>) mBitmapWidth;</span><br><span class="line">            dy = (mDrawableRect.<span class="variable">height</span>() - mBitmapHeight * <span class="built_in">scale</span>) * <span class="number">0.5</span>f;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// shaeder的变换矩阵，我们这里主要用于放大或者缩小。</span></span><br><span class="line">        mShaderMatrix.setScale(<span class="built_in">scale</span>, <span class="built_in">scale</span>);</span><br><span class="line">        <span class="comment">// 平移</span></span><br><span class="line">        mShaderMatrix.postTranslate((<span class="built_in">int</span>) (dx + <span class="number">0.5</span>f) + mBorderWidth, (<span class="built_in">int</span>) (dy + <span class="number">0.5</span>f) + mBorderWidth);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置变换矩阵</span></span><br><span class="line">        mBitmapShader.setLocalMatrix(mShaderMatrix);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在android开发中，官方给我们的原生控件往往无法满足我们的需求，这时候我们经常要自定义控件，除了实现功能的需求外，当然也存在着点装逼成分，哈，下面是我关于自定义控件的一些总结。<br>]]>
    
    </summary>
    
      <category term="自定义控件" scheme="http://www.dreamxuwj.com/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
    
      <category term="移动开发" scheme="http://www.dreamxuwj.com/categories/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[AndroidStudio中如何使用Git和Github来管理项目]]></title>
    <link href="http://www.dreamxuwj.com/2015/06/11/Android%20Studio%E4%B8%AD%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Git%E5%92%8CGithub%E6%9D%A5%E7%AE%A1%E7%90%86%E9%A1%B9%E7%9B%AE/"/>
    <id>http://www.dreamxuwj.com/2015/06/11/Android Studio中如何使用Git和Github来管理项目/</id>
    <published>2015-06-11T13:35:37.000Z</published>
    <updated>2015-06-11T13:53:45.976Z</updated>
    <content type="html"><![CDATA[<p>由于本人是个屌丝，还没用起高大尚mac，所以本篇文章介绍的是基于window系统的</p>
<p>As we know，<code>Git</code>是目前世界上最先进的分布式版本控制系统，而<code>Github</code>是最大的开源社区。在<code>Github</code>上的项目就是使用<code>git</code>来管理的，所以学好<code>Git</code>的使用是很有必要的。下面看具体步骤。<br><a id="more"></a><br>1、要在as中使用<code>git</code>，首先你的在本地安装<code>Git</code>，具体安装流程大家可以看我blog：<a href="http://blog.csdn.net/wei18359100306/article/details/41255963" target="_blank" rel="external">版本控制工具Git详解</a>​<br>2、在<code>studio</code>中配置<code>git</code>插件：File-&gt;Setting-&gt;Version Control-&gt;Git, 然后选择你本地的<code>Git</code>安装路径（需要定位到bin目录下的git.exe），然后点击Test测试一下，结果如下图：那么恭喜你，你已经设置成功了！<br><img src="http://img.blog.csdn.net/20150511161822998" alt=""></p>
<p>3、将项目初始化git项目(<code>git init</code>)，操作如下：VCS-&gt;Enable Control Integration-&gt;Select “Git”.（当然也可以使用git命令，自行选择）<br><img src="http://img.blog.csdn.net/20150511161945740" alt=""><br><img src="http://img.blog.csdn.net/20150511162206767" alt=""></p>
<p>完成后会出现红框内的按钮<br><img src="http://img.blog.csdn.net/20150511162227952" alt=""></p>
<p>4、上传项目到Github前的准备-&gt;忽略部分文件（如将gen .idea  .iml等）<br>上传项目前要先扩展插件，以便于忽略一些不必要提交的文件，点击项目根目录下的.gitignore文件，出现下图，点击右上角安装插件<br><img src="http://img.blog.csdn.net/20150511163225571" alt=""></p>
<p><img src="http://img.blog.csdn.net/20150511163304181" alt=""></p>
<p>然后你就可以在<code>gitignore</code>中写出你想忽略的那些文件的名字，一般忽略以上文件即可</p>
<p><strong>note</strong>：很多情况下<code>gitignore</code>是不起作用的，既在你上传到服务器时是不起作用的，这时你可以如下图这样做（第一是添加文件，第二是添加文件夹）<br><img src="http://img.blog.csdn.net/20150511163344429" alt=""></p>
<p>5、上传项目到Github前的准备-&gt;登陆Github（没有Github账号的请自行去<a href="https://github.com" target="_blank" rel="external">注册</a>）<br><img src="http://img.blog.csdn.net/20150511162715567" alt=""></p>
<p>6、share到Github（VCS&gt;Import into Version Control&gt;Share Project on GitHub）<br><img src="http://img.blog.csdn.net/20150511163114856" alt=""></p>
<p>7、添加仓库名称和描述<br><img src="http://img.blog.csdn.net/20150511162114473" alt=""></p>
<p>8、选择要提交的文件，并对此次提交做一个描述，<strong>对比第四步的note，是不是发现我们ignore掉的文件都没在此出现！</strong><br><img src="http://img.blog.csdn.net/20150511162602497" alt=""></p>
<p>9、登陆Github，查看仓库<br><img src="http://img.blog.csdn.net/20150511162707021" alt=""></p>
<h2 id=""><br></h2><p><br><br>既然Github是用来分布式控制版本系统，那我们如何将已经上传到Github的项目<code>Clone</code>到本地呢<br>1、<code>VCS-&gt;Checkout from Version Control-&gt;GitHub</code>,如图选择想要克隆的项目，设置好目录和项目名称，点击<code>Clone</code>即可。Android Studio 会在本地新建一个Project.<br><img src="http://img.blog.csdn.net/20150511163141270" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>由于本人是个屌丝，还没用起高大尚mac，所以本篇文章介绍的是基于window系统的</p>
<p>As we know，<code>Git</code>是目前世界上最先进的分布式版本控制系统，而<code>Github</code>是最大的开源社区。在<code>Github</code>上的项目就是使用<code>git</code>来管理的，所以学好<code>Git</code>的使用是很有必要的。下面看具体步骤。<br>]]>
    
    </summary>
    
      <category term="Git使用" scheme="http://www.dreamxuwj.com/tags/Git%E4%BD%BF%E7%94%A8/"/>
    
      <category term="移动开发" scheme="http://www.dreamxuwj.com/categories/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[android studio离线更新]]></title>
    <link href="http://www.dreamxuwj.com/2015/05/28/android%20studio%E7%A6%BB%E7%BA%BF%E6%9B%B4%E6%96%B0/"/>
    <id>http://www.dreamxuwj.com/2015/05/28/android studio离线更新/</id>
    <published>2015-05-28T03:53:29.000Z</published>
    <updated>2015-05-30T15:22:58.800Z</updated>
    <content type="html"><![CDATA[<h1 id="为什么进行离线更新？">为什么进行离线更新？</h1><p>很多软件，要是能在线更新，我想没有哪个人会无聊到自己去更新…废话截止…下面讲原因，原因有二</p>
<ol>
<li>生活在天朝，伟大的墙<code>GFW</code>阻拦了我们看世界<a id="more"></a></li>
<li>Google最近发疯，点击<strong>Menu-Help-check for update…</strong> 出现下图，点击以后要你下载整个安装包…<br><img src="http://7xj4l6.com1.z0.glb.clouddn.com/QQ图片20150528112043.png" alt=""></li>
</ol>
<h1 id="如何进行离线更新？">如何进行离线更新？</h1><h2 id="获取本地自己的版本信息">获取本地自己的版本信息</h2><p>打开<strong>Menu-Help-About</strong>，找到当前安装的版本号,如下图，也可以到自己的<code>android studio</code>安装目录下，找到<code>build.txt</code>文件，打开查看,可以看出我当前的版本号为：<code>135.1740770</code><br><img src="http://7xj4l6.com1.z0.glb.clouddn.com/QQ图片20150528142238.png" alt=""></p>
<h2 id="获取最新版本信息">获取最新版本信息</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http<span class="variable">s:</span>//<span class="keyword">dl</span>.google.<span class="keyword">com</span>/android/studio/patches/updates.xml</span><br></pre></td></tr></table></figure>
<p>如下图：可以看出最新的版本号为：<code>141.1903250</code>,以及一些历史版本号,不要以为这些历史版本号没用，亲，还是会用到的，存在即必然…<br><img src="http://7xj4l6.com1.z0.glb.clouddn.com/QQ截图20150528140717.png" alt=""></p>
<h2 id="离线更新包的下载">离线更新包的下载</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http<span class="variable">s:</span>//<span class="keyword">dl</span>.google.<span class="keyword">com</span>/android/studio/patches/AI-<span class="number">135.1740770</span>-<span class="number">141.1901332</span>-patch-win.jar</span><br></pre></td></tr></table></figure>
<p><code>135.1740770</code>:当前版本号<br><code>141.1901332</code>:最新版本号,也是你自己安装的目标版本号<br>即下载<code>url</code>拼接如下<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="link_url">https://dl.google.com/android/studio/patches/AI-</span>[<span class="link_label">当前安装版本号</span>]-[更新的目标版本]-patch-win.jar</span><br></pre></td></tr></table></figure></p>
<h2 id="离线更新包的安装">离线更新包的安装</h2><p><code>关闭所有</code>与<code>Android Studio</code>相关的任务,把上一步下载的jar拷贝到某一个目录下（<code>注：不能拷贝到android studio 的安装目录！</code>），启动<code>cmd</code>，将路径定位到jar的相关文件夹中，输入如下命令<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -classpath AI-<span class="number">135.1740770</span>-<span class="number">141.1901332</span>-patch-win<span class="class">.jar</span> com<span class="class">.intellij</span><span class="class">.updater</span><span class="class">.Runner</span> install [android studio的安装目录]</span><br></pre></td></tr></table></figure></p>
<p>安装过程截图如下：<br><img src="http://7xj4l6.com1.z0.glb.clouddn.com/1234.png" alt=""><br>安装完后，重复第一步的步骤，看到版本已经更新到最新了<br><img src="http://7xj4l6.com1.z0.glb.clouddn.com/QQ截图20150528145528.png" alt=""></p>
<p><code>注意事项：</code></p>
<ul>
<li>安装的时候一定不要把<code>jar</code>拷贝到<code>android studio</code>的安装目录中！</li>
<li>安装的时候一定要关闭<code>android studio</code>!<br>如果上面两步不注意，可能出现如下错误<br><img src="http://7xj4l6.com1.z0.glb.clouddn.com/QQ图片20150528144931.png" alt=""></li>
</ul>
<p>亲，如果还安装不成功，请留言…</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="为什么进行离线更新？">为什么进行离线更新？</h1><p>很多软件，要是能在线更新，我想没有哪个人会无聊到自己去更新…废话截止…下面讲原因，原因有二</p>
<ol>
<li>生活在天朝，伟大的墙<code>GFW</code>阻拦了我们看世界]]>
    
    </summary>
    
      <category term="studio离线更新" scheme="http://www.dreamxuwj.com/tags/studio%E7%A6%BB%E7%BA%BF%E6%9B%B4%E6%96%B0/"/>
    
      <category term="移动开发" scheme="http://www.dreamxuwj.com/categories/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[android反编译APK的那些事]]></title>
    <link href="http://www.dreamxuwj.com/2015/05/26/android%E5%8F%8D%E7%BC%96%E8%AF%91APK%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    <id>http://www.dreamxuwj.com/2015/05/26/android反编译APK的那些事/</id>
    <published>2015-05-26T11:41:38.000Z</published>
    <updated>2015-05-30T05:59:38.224Z</updated>
    <content type="html"><![CDATA[<p>反编译工具最新下载地址 <a href="http://download.csdn.net/detail/wei18359100306/8741985" target="_blank" rel="external">传送门</a><br><a id="more"></a></p>
<h1 id="工具介绍：">工具介绍：</h1><ul>
<li><strong>apktool</strong><br>资源文件获取，可以提取出图片文件和布局文件进行使用查看</li>
<li><strong>dex2jar</strong><br>将<code>apk</code>反编译成<code>java</code>源码（classes.dex转化成jar文件）</li>
<li><strong>jd-gui</strong><br>查看<code>classes.dex</code>转化成出的<code>jar</code>文件</li>
</ul>
<h1 id="工具使用：">工具使用：</h1><p>具体的过程请看我csdn博客—&gt;<a href="http://blog.csdn.net/wei18359100306/article/details/41547333" target="_blank" rel="external">传送门</a></p>
<h1 id="-smali文件的查看">.smali文件的查看</h1><p>反编译后我们要看源代码，可能会看到后缀为<code>.smali</code>,那么我们如何查看这种形式的代码，请看博客—&gt;<a href="http://blog.csdn.net/tmacsky/article/details/44081585" target="_blank" rel="external">利用SublimeText查看Android反编译smali文件</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>反编译工具最新下载地址 <a href="http://download.csdn.net/detail/wei18359100306/8741985">传送门</a><br>]]>
    
    </summary>
    
      <category term="反编译" scheme="http://www.dreamxuwj.com/tags/%E5%8F%8D%E7%BC%96%E8%AF%91/"/>
    
      <category term="移动开发" scheme="http://www.dreamxuwj.com/categories/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[自定义带动画button]]></title>
    <link href="http://www.dreamxuwj.com/2015/05/21/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B8%A6%E5%8A%A8%E7%94%BBbutton/"/>
    <id>http://www.dreamxuwj.com/2015/05/21/自定义带动画button/</id>
    <published>2015-05-21T14:09:02.000Z</published>
    <updated>2015-07-07T17:47:42.497Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xj4l6.com1.z0.glb.clouddn.com/sendmsgbtn.gif" alt=""><br><a id="more"></a><br>具体代码请看我<a href="https://github.com/xuwj/SendMsgbuttonDemo" target="_blank" rel="external">Github</a>,有疑问的请留言，具体的讲解有时间在说明…</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xj4l6.com1.z0.glb.clouddn.com/sendmsgbtn.gif" alt=""><br>]]>
    
    </summary>
    
      <category term="自定义控件" scheme="http://www.dreamxuwj.com/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
    
      <category term="移动开发" scheme="http://www.dreamxuwj.com/categories/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[梦的起点]]></title>
    <link href="http://www.dreamxuwj.com/2015/05/16/%E6%A2%A6%E7%9A%84%E8%B5%B7%E7%82%B9/"/>
    <id>http://www.dreamxuwj.com/2015/05/16/梦的起点/</id>
    <published>2015-05-16T15:16:28.000Z</published>
    <updated>2015-12-09T06:29:24.378Z</updated>
    <content type="html"><![CDATA[<p>终点之美，属于优胜者；起点之美，属于每个人。自觉地进入起点并调动起自己的美，也便是人生的优胜。<br><a id="more"></a></p>
<h1 id="Blog_name">Blog name</h1><p>截止<code>2015-05-16</code>为止，终于拥有了自己的私人空间。也许是感性，也许是喜欢，自己依然用梦痕来标识自己。域名也任性的选择了<code>dreamxuwj.com</code>，梦——一生相伴。</p>
<h1 id="About_me">About me</h1><p>student of FJNU ,Focus on mobile develop and know some product design</p>
<h1 id="In_a_sentence_for_everyone">In a sentence for everyone</h1><p>人走到任何境地都是因为自己</p>
<h1 id="favorite_sentences">favorite sentences</h1><ol>
<li>There’s a phrase in Buddhism, ‘Beginner’s mind.’ It’s wonderful to have a beginner’s mind<br>拥有初学者的心态是件了不起的事情。</li>
<li>Innovation distinguishes between a leader and a follower.<br>领袖和跟风者的区别就在于创新。</li>
<li>learn how to listen, it’s an art.<br>学会倾听，这是一门艺术！</li>
</ol>
<h1 id="Thanks">Thanks</h1><p>感谢搭建网站过程中所给予帮助的两位朋友<a href="http://codemx.cn" target="_blank" rel="external">墨香</a>和<a href="http://chenfuduo.me/" target="_blank" rel="external">菜鸟</a>，也感谢热爱开源和极具分享精神的developer。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>终点之美，属于优胜者；起点之美，属于每个人。自觉地进入起点并调动起自己的美，也便是人生的优胜。<br>]]>
    
    </summary>
    
      <category term="随笔" scheme="http://www.dreamxuwj.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="随笔生活" scheme="http://www.dreamxuwj.com/categories/%E9%9A%8F%E7%AC%94%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>